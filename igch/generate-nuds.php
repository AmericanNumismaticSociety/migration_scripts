<?php 

$findspots = generate_json('https://docs.google.com/spreadsheet/pub?hl=en_US&hl=en_US&key=0Avp6BVZhfwHAdEgzSnpGVEdDb0dzZHVCdDJoZ09IS2c&single=true&gid=0&output=csv');
$denominations = generate_json('https://docs.google.com/spreadsheet/pub?hl=en_US&hl=en_US&key=0Avp6BVZhfwHAdGZfOERpTDBiZFo3aWEtZ2pORnpZeVE&single=true&gid=0&output=csv');
$refs = generate_json('https://docs.google.com/spreadsheet/pub?hl=en_US&hl=en_US&key=0Avp6BVZhfwHAdERobDMwa05TQi1feFpyeVBVckNhTGc&single=true&gid=0&output=csv');
$nomismaURIs = generate_json('https://docs.google.com/spreadsheet/pub?hl=en_US&hl=en_US&key=0Avp6BVZhfwHAdFFSdVRwZEFmams0THV2cnJkVzQxNmc&single=true&gid=0&output=csv');

if ($handle = opendir('igch')) {
	while (false !== ($entry = readdir($handle))) {
		if (strstr($entry, '.txt')){
			$id = strstr($entry, '.txt', true);
			echo "Processing {$id}\n";
			generate_nuds($id);
			
		}
	}
}

function generate_nuds($id){
	GLOBAL $findspots;
	GLOBAL $denominations;
	GLOBAL $refs;
	GLOBAL $nomismaURIs;
	
	$doc = new DOMDocument();
	$doc->load('igch/' . $id . '.txt');
	$xpath = new DOMXPath($doc);
	$xpath->registerNamespace('xhtml', "http://www.w3.org/1999/xhtml");
	
	//extract findspot information
	$findspot_uri = '';
	$findspot_text = '';
	$discovery_text = '';
	$date_text = '';	
	foreach ($findspots as $findspot){
		if ($findspot['id'] == $id){
			//findspot URI
			if (strlen($findspot['geonames_uri']) > 0){
				$findspot_uri = $findspot['geonames_uri'];
			}
			//findspot text
			$pieces = explode(',', $findspot['value']);
			$new = array_slice($pieces, 0, count($pieces) - 1);
			$findspot_text = $findspot['value'];
			
			//deposit date
			$date_text = array_slice($pieces, -1, 1);
		}
	}
	
	//get burial date from XHTML
	$closing_date = $xpath->query("//*[@property='closing_date']")->item(0);
	$closing_date_start = $xpath->query("//*[@property='closing_date_start']")->item(0);
	$closing_date_end = $xpath->query("//*[@property='closing_date_end']")->item(0);
	
	//get contents links
	$links = $xpath->query('//xhtml:pre/xhtml:span[@resource]');
	
	//process disposition, refs, and notes
	$disposition_text = '';
	$ref_array = array();
	$note_array = array();
	foreach ($refs as $ref){
		if ($ref['id'] == $id){
			if ($ref['type'] == 'disposition'){
				$disposition_text = $ref['value'];
			} elseif ($ref['type'] == 'note'){
				$note_array[] = $ref['value'];
			} elseif ($ref['type'] == 'ref'){
				$ref_array[] = $ref['value'];
			}
		}
	}
	
	$writer = new XMLWriter();  
	$writer->openURI("nuds/{$id}.xml");  
	//$writer->openURI('php://output');
	$writer->startDocument('1.0','UTF-8');  
	$writer->setIndent(4);   
	$writer->startElement('nudsHoard');  
		$writer->writeAttribute('xmlns', 'http://nomisma.org/nudsHoard');  
		$writer->writeAttribute('xmlns:xlink', "http://www.w3.org/1999/xlink");  
		$writer->writeAttribute('xmlns:nuds', "http://nomisma.org/nuds");  
		$writer->writeAttribute('xmlns:mods', "http://www.loc.gov/mods/v3");
		$writer->writeAttribute('xmlns:xsi', "http://www.w3.org/2001/XMLSchema-instance");	 
		//begin control
		$writer->startElement('control');  
			$writer->writeElement('recordId', $id);
			$writer->writeElement('maintenanceStatus', 'derived');
			$writer->writeElement('publicationStatus', 'approved');
			$writer->startElement('maintenanceAgency');
				$writer->writeElement('agencyName', 'American Numismatic Society');
			$writer->endElement();
			$writer->startElement('maintenanceHistory');
				$writer->startElement('maintenanceEvent');
					$writer->writeElement('eventType', 'derived');
					$writer->startElement('eventDateTime');
						$writer->writeAttribute('standardDateTime', date(DATE_W3C));
						$writer->text(date(DATE_RFC2822));						
					$writer->endElement();
					$writer->writeElement('agentType', 'human');
					$writer->writeElement('agent', 'Ethan Gruber');
					$writer->writeElement('eventDescription', 'NUDS-Hoard records generated by Ethan Gruber from Google Spreadsheets and nomisma XHTML+RDFa.');
				$writer->endElement();
			$writer->endElement();
			$writer->startElement('rightsStmt');
				$writer->writeElement('copyrightHolder', 'American Numismatic Society');
				$writer->startElement('date');
					$writer->writeAttribute('standardDate', '2014');
					$writer->text('2014');
				$writer->endElement();
			$writer->endElement();
		$writer->endElement();
			//end control
		//begin descMeta
		$writer->startElement('descMeta');
			$writer->startElement('title');				
				$writer->writeAttribute('xml:lang', 'en');
				$writer->text('IGCH ' . intval(str_replace('igch', '', $id)));
			$writer->endElement();
			//noteSet
			if (count($note_array) > 0){
				$writer->startElement('noteSet');
				foreach ($note_array as $note){
					$writer->writeElement('note', $note);
				}
				$writer->endElement();
			}				
			$writer->startElement('hoardDesc');
				if (strlen($findspot_text) > 0){
					$writer->startElement('findspot');
						$writer->startElement('geogname');
							$writer->writeAttribute('xlink:type', 'simple');
							$writer->writeAttribute('xlink:role', 'findspot');
							if (strlen($findspot_uri) > 0){
								$writer->writeAttribute('xlink:href', $findspot_uri);
							}
							$writer->text($findspot_text);
						$writer->endElement();
					$writer->endElement();
				}		
				//end findspot
				//start deposit
				if (count($closing_date) > 0){
					$writer->startElement('deposit');
						$writer->startElement('date');
							$writer->writeAttribute('standardDate', $closing_date->getAttribute('content'));
							$writer->text($closing_date->nodeValue);
						$writer->endElement();
					$writer->endElement();
				} else if (count($closing_date_start) > 0 && count($closing_date_end) > 0){
					$writer->startElement('deposit');
						$writer->startElement('dateRange');
							$writer->startElement('fromDate');
								$writer->writeAttribute('standardDate', $closing_date_start->getAttribute('content'));
								$writer->text($closing_date_start->nodeValue);
							$writer->endElement();
							$writer->startElement('toDate');
								$writer->writeAttribute('standardDate', $closing_date_end->getAttribute('content'));
								$writer->text($closing_date_end->nodeValue);
							$writer->endElement();
						$writer->endElement();
					$writer->endElement();
				}
				//end deposit
				//start discovery			
				preg_match('/([0-9]{4})/', $date_text[0], $matches);
				if (count($matches) == 2 || count($matches == 3)){
					$writer->startElement('discovery');
						if (count($matches) == 2){
							$writer->startElement('date');
								$writer->writeAttribute('standardDate', $matches[1]);
								$writer->text($matches[1]);
							$writer->endElement();
						} elseif (count($matches) == 3){
							$writer->startElement('dateRange');
								$writer->startElement('fromDate');
									$writer->writeAttribute('standardDate', $matches[1]);
									$writer->text($matches[1]);
								$writer->endElement();
								$writer->startElement('toDate');
									$writer->writeAttribute('standardDate', $matches[2]);
									$writer->text($matches[2]);
								$writer->endElement();
							$writer->endElement();
						}
					$writer->endElement();
				}
				//end discovery
				//start disposition
				if (strlen($disposition_text) > 0){
					$writer->writeElement('disposition', $disposition_text);
				}
				//end disposition
			$writer->endElement();
			//end hoardDesc
			//start contentsDesc
			$writer->startElement('contentsDesc');
				//contents
				$writer->startElement('contents');
					foreach ($links as $link){
						$resource = $link->getAttribute('resource');
						$val = trim($link->nodeValue);
						
						//first look for mentions of denominations
						preg_match_all('/[0-9]+\s[^\s]+/', $val, $matches);						
						if (count($matches[0]) > 0){
							foreach ($matches as $match){
								foreach ($match as $frag) {
									$pieces = explode(' ', $frag);
									$count = $pieces[0];
									$den = $pieces[1];
									$den = str_replace(';', '', $den);
							
									if ($count == 1){
										$writer->startElement('coin');
										$writer->startElementNS('nuds', 'typeDesc', NULL);
										//process denominations
										if (!strstr($den, '(') && !strstr($den, ')') && !strstr($den, '[') && !strstr($den, ']')){
											foreach ($denominations as $row){
												process_denomination($writer, $row, $den, $id);
											}
										}
										//insert mint/region/authority link
										if (strlen($resource) > 0){
											foreach ($nomismaURIs as $row){
												process_mint($writer, $row, $resource);
											}
										}
										$writer->endElement();
										$writer->endElement();
									} else {
										$writer->startElement('coinGrp');
										$writer->writeAttribute('count', $count);
										$writer->startElementNS('nuds', 'typeDesc', NULL);
										//process denominations
										if (!strstr($den, '(') && !strstr($den, ')') && !strstr($den, '[') && !strstr($den, ']')){
											foreach ($denominations as $row){
												process_denomination($writer, $row, $den, $id);
											}
										}
										if (strlen($resource) > 0){
											foreach ($nomismaURIs as $row){
												process_mint($writer, $row, $resource);
											}
										}
										$writer->endElement();
										$writer->endElement();
									}
								}
							}
						} else {
							//strip extra spaces
							$val = preg_replace('/^[\s]+/', '', $val);
							$pieces = explode(' ', $val);
							foreach($pieces as $piece){
								if (!strstr($piece, '(') && !strstr($piece, ')') && !strstr($piece, '[') && !strstr($piece, ']')){
									if (is_numeric($piece)){
										$count = $piece;
										if ($count == 1){
											$writer->startElement('coin');
											$writer->startElementNS('nuds', 'typeDesc', NULL);
											//insert mint/region/authority link
											if (strlen($resource) > 0){
												foreach ($nomismaURIs as $row){
													process_mint($writer, $row, $resource);
												}
											}											
											$writer->endElement();
											$writer->endElement();
										} else if ($count > 1) {
											$writer->startElement('coinGrp');
											$writer->writeAttribute('count', $count);
											$writer->startElementNS('nuds', 'typeDesc', NULL);
											if (strlen($resource) > 0){
												foreach ($nomismaURIs as $row){
													process_mint($writer, $row, $resource);
												}
											}
											$writer->endElement();
											$writer->endElement();
										}
									}
								}																
							}
						}
									
					}
				$writer->endElement();
				//end contents
			$writer->endElement();
			//end contentsDesc
			//start refDesc
			if (count($ref_array) > 0){
				$writer->startElement('refDesc');
				foreach ($ref_array as $ref){
					$writer->writeElement('reference', $ref);
				}
				$writer->endElement();
			}			
			//end refDesc
		$writer->endElement();
		//end descMeta
	$writer->endElement();
	//end nudsHoard
	
	return $writer->flush();
}

function process_denomination($writer, $row, $den, $id){
	if ($den == $row['value']){
		if (strpos($row['uri'], 'nomisma') !== FALSE){
			$notes = explode(', ', $row['note']);
			$num = str_replace('igch', '', $id);
				
			$writer->startElementNS('nuds', 'denomination', NULL);
			$writer->writeAttribute('xlink:type', 'simple');
			if (strlen($row['note']) == 0 || in_array($num, $notes)){
				$writer->writeAttribute('xlink:href', $row['uri']);
			}
			if (strpos($den, '?') === TRUE){
				$writer->writeAttribute('certainty', 'uncertain');
			}
			$writer->endElement();
		}
	}
}

function process_mint($writer, $row, $resource){
	if ($row['value'] == $resource){
		switch ($row['type']){
			case 'mint':
				if (strpos($row['uri'], 'nomisma') !== FALSE){
					$writer->startElementNS('nuds', 'geographic', NULL);
						$writer->startElementNS('nuds', 'geogname', NULL);
						$writer->writeAttribute('xlink:type', 'simple');
						$writer->writeAttribute('xlink:role', 'mint');
						$writer->writeAttribute('xlink:href', $row['uri']);
						$writer->endElement();
					$writer->endElement();
				}
				break;
			case 'head_1911_region':
				if (strpos($row['uri'], 'nomisma') !== FALSE){
					$writer->startElementNS('nuds', 'geographic', NULL);
						$writer->startElementNS('nuds', 'geogname', NULL);
						$writer->writeAttribute('xlink:type', 'simple');
						$writer->writeAttribute('xlink:role', 'region');
						$writer->writeAttribute('xlink:href', $row['uri']);
						$writer->endElement();
					$writer->endElement();
				}
				break;
			case 'authority':
				if (strpos($row['uri'], 'nomisma') !== FALSE){
					$writer->startElementNS('nuds', 'geographic', NULL);
						$writer->startElementNS('nuds', 'persname', NULL);
						$writer->writeAttribute('xlink:type', 'simple');
						$writer->writeAttribute('xlink:role', 'authority');
						$writer->writeAttribute('xlink:href', $row['uri']);
						$writer->endElement();
					$writer->endElement();
				}
				break;
		}
	}
}

function generate_json($doc){
	$keys = array();
	$geoData = array();

	$data = csvToArray($doc, ',');

	// Set number of elements (minus 1 because we shift off the first row)
	$count = count($data) - 1;

	//Use first row for names
	$labels = array_shift($data);

	foreach ($labels as $label) {
		$keys[] = $label;
	}

	// Bring it all together
	for ($j = 0; $j < $count; $j++) {
		$d = array_combine($keys, $data[$j]);
		$geoData[$j] = $d;
	}
	return $geoData;
}

// Function to convert CSV into associative array
function csvToArray($file, $delimiter) {
	if (($handle = fopen($file, 'r')) !== FALSE) {
		$i = 0;
		while (($lineArray = fgetcsv($handle, 4000, $delimiter, '"')) !== FALSE) {
			for ($j = 0; $j < count($lineArray); $j++) {
				$arr[$i][$j] = $lineArray[$j];
			}
			$i++;
		}
		fclose($handle);
	}
	return $arr;
}
?>