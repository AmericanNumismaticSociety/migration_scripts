<?php 
  /**** 
  * Author: Ethan Gruber
  * Date: April 2018
  * Function: Transform CSV for IGCH Hellenistic Hoards into NUDS-Hoard XML 
  ****/

$contents = generate_json('contents.csv');
$counts = generate_json('counts.csv');
$hoards = array();

//associative array of Nomisma IDs and preferred labels
$nomisma = array();

foreach($counts as $hoard){
	if (strlen($hoard['id']) > 0){
		$id = trim($hoard['id']);
		
		$record = array();
		
		//handle counts
		if (strlen($hoard['total count']) && is_numeric(trim($hoard['total count']))){
			$record['total'] = (int)$hoard['total count'];
		}
		if (strlen($hoard['min count']) && is_numeric(trim($hoard['min count']))){
			$record['min'] = (int)$hoard['min count'];
		}
		if (strlen($hoard['max count']) && is_numeric(trim($hoard['max count']))){
			$record['max'] = (int)$hoard['max count'];
		}
		if (trim($hoard['approximate']) == 'yes'){
			$record['is_approximate'] = true;
		}
		if (strlen($hoard['notes']) > 0){
			
		}
		
		//reconstruct the contents into an associative array
		foreach ($contents as $row){
			//ignore blank rows
			if ($row['id'] == $id){
				$content = array();
				
				$content['count'] = $row['count'];
				//insert approximation
				
				//typeDesc
				if (strlen($row['nomisma id (region)']) > 0){
					$content['region_uri'] = trim($row['nomisma id (region)']);
				}
				if (strlen($row['nomisma id (mint)']) > 0){
					$content['mint_uri'] = trim($row['nomisma id (mint)']);
				}
				if (strlen($row['nomisma id (denomination)']) > 0){
					$content['denomination_uri'] = trim($row['nomisma id (denomination)']);
				}
				if (strlen($row['nomisma id (authority)']) > 0){
					$content['authority_uri'] = trim($row['nomisma id (authority)']);
				}
				if (strlen($row['nomisma id (dynasty)']) > 0){
					$content['dynasty_uri'] = trim($row['nomisma id (dynasty)']);
				}
				
				//refs
				if (strlen($row['ref1']) > 0){
					$content['refs']['ref1'] = $row['ref1'];
				}
				if (strlen($row['ref2']) > 0){
					$content['refs']['ref2'] = $row['ref2'];
				}
				if (strlen($row['ref3']) > 0){
					$content['refs']['ref3'] = $row['ref3'];
				}
				if (strlen($row['ref4']) > 0){
					$content['refs']['ref4'] = $row['ref4'];
				}
				if (strlen($row['ref5']) > 0){
					$content['refs']['ref5'] = $row['ref5'];
				}
				if (strlen($row['nomisma id (ref1)']) > 0){
					$content['refs']['uri'] = $row['nomisma id (ref1)'];
				}
				
				$record['contents'][] = $content;
			}
		}
		
		//add hoard record into master hoards array
		$hoards[$id] = $record;
	}
}

//var_dump($hoards);

$count = 0;
foreach ($hoards as $k=>$v){
	if ($count < 2){
		var_dump($v);
		generate_nuds($k, $v);		
	}
	$count++;
}


/***** FUNCTIONS *****/
function generate_nuds($recordId, $hoard){
	$writer = new XMLWriter();  
	//$writer->openURI("nuds/{$recordId}.xml");  
	$writer->openURI('php://output');
	$writer->setIndent(true);
	$writer->setIndentString("    ");	
	$writer->startDocument('1.0','UTF-8');
	
	//begin XML document
	$writer->startElement('nudsHoard');  
		$writer->writeAttribute('xmlns', 'http://nomisma.org/nudsHoard');  
		$writer->writeAttribute('xmlns:xlink', "http://www.w3.org/1999/xlink");  
		$writer->writeAttribute('xmlns:nuds', "http://nomisma.org/nuds");  
		$writer->writeAttribute('xmlns:mods', "http://www.loc.gov/mods/v3");
		$writer->writeAttribute('xmlns:xsi', "http://www.w3.org/2001/XMLSchema-instance");	 
		//begin control
		$writer->startElement('control');  
			$writer->writeElement('recordId', $recordId);
			$writer->writeElement('maintenanceStatus', 'derived');
			$writer->writeElement('publicationStatus', 'approved');
			$writer->startElement('maintenanceAgency');
				$writer->writeElement('agencyName', 'American Numismatic Society');
			$writer->endElement();
			$writer->startElement('maintenanceHistory');
				$writer->startElement('maintenanceEvent');
					$writer->writeElement('eventType', 'derived');
					$writer->startElement('eventDateTime');
						$writer->writeAttribute('standardDateTime', date(DATE_W3C));
						$writer->text(date(DATE_RFC2822));						
					$writer->endElement();
					$writer->writeElement('agentType', 'human');
					$writer->writeElement('agent', 'Ethan Gruber');
					$writer->writeElement('eventDescription', 'NUDS-Hoard records generated by Ethan Gruber from spreadsheets Disnarda Pinilla cleaned from the IGCH records.s');
				$writer->endElement();
			$writer->endElement();
			$writer->startElement('rightsStmt');
				$writer->writeElement('copyrightHolder', 'American Numismatic Society');				
			$writer->endElement();
		//end control
		$writer->endElement();
		
		//descMeta
		$writer->startElement('descMeta');
			//hoardDesc
		
			//contentsDesc
			if (count($hoard['contents']) > 0){
				$writer->startElement('contentsDesc');
					$writer->startElement('contents');
					foreach ($hoard['contents'] as $content){
						//coin or coinGrp
						if ((int)$content['count'] == 1){
							$writer->startElement('coin');
							generate_content($writer, $content);
							$writer->endElement();
						} else {
							$writer->startElement('coinGrp');
								$writer->writeAttribute('count', $content['count']);
								generate_content($writer, $content);
							$writer->endElement();							
						}
					}
					$writer->endElement();
				$writer->endElement();
			}
			
		//end descMeta
		$writer->endElement();	
	//end nudsHoard
	$writer->endElement();	
	//end document
	return $writer->flush();
}

//generate the content element from metadata in the content row (typeDesc and refDesc
function generate_content($writer, $content){
	//begin with typeDesc
	$writer->startElement('nuds:typeDesc');
		if (array_key_exists('mint_uri', $content) || array_key_exists('region_uri', $content)){
			if (array_key_exists('denomination_uri', $content)){
				$label = get_label($content['denomination_uri']);
				if (isset($label)){
					$writer->startElement('nuds:denomination');
						$writer->writeAttribute('xlink:type', 'simple');
						$writer->writeAttribute('xlink:href', $content['denomination_uri']);
						$writer->text($label);
					$writer->endElement();
				}
			}
			if (array_key_exists('material_uri', $content)){
				$label = get_label($content['material_uri']);
				if (isset($label)){
					$writer->startElement('nuds:material');
					$writer->writeAttribute('xlink:type', 'simple');
					$writer->writeAttribute('xlink:href', $content['material_uri']);
					$writer->text($label);
					$writer->endElement();
				}
			}
			
			//authority
			if (array_key_exists('authority_uri', $content) || array_key_exists('dynasty_uri', $content)){
				$writer->startElement('nuds:authority');
				if (array_key_exists('authority_uri', $content)){
					$label = get_label($content['authority_uri']);
					if (isset($label)){
						$writer->startElement('nuds:persname');
							$writer->writeAttribute('xlink:type', 'simple');
							$writer->writeAttribute('xlink:role', 'authority');
							$writer->writeAttribute('xlink:href', $content['authority_uri']);
							$writer->text($label);
						$writer->endElement();
					}
				}
				if (array_key_exists('dynasty_uri', $content)){
					$label = get_label($content['dynasty_uri']);
					if (isset($label)){
						$writer->startElement('nuds:famname');
							$writer->writeAttribute('xlink:type', 'simple');
							$writer->writeAttribute('xlink:role', 'dynasty');
							$writer->writeAttribute('xlink:href', $content['dynasty_uri']);
							$writer->text($label);
						$writer->endElement();
					}
				}
				$writer->endElement();
			}
			
			//geographic
			if (array_key_exists('mint_uri', $content) || array_key_exists('region_uri', $content)){
				$writer->startElement('nuds:geographic');
					if (array_key_exists('mint_uri', $content)){
						$label = get_label($content['mint_uri']);					
						if (isset($label)){
							$writer->startElement('nuds:geogname');
								$writer->writeAttribute('xlink:type', 'simple');
								$writer->writeAttribute('xlink:role', 'mint');
								$writer->writeAttribute('xlink:href', $content['mint_uri']);
								$writer->text($label);
							$writer->endElement();
						}					
					}
					if (array_key_exists('region_uri', $content)){
						$label = get_label($content['region_uri']);					
						if (isset($label)){
							$writer->startElement('nuds:geogname');
								$writer->writeAttribute('xlink:type', 'simple');
								$writer->writeAttribute('xlink:role', 'region');
								$writer->writeAttribute('xlink:href', $content['region_uri']);
								$writer->text($label);
							$writer->endElement();
						}
					}
				$writer->endElement();
			}
			
		}
	//end typeDesc
	$writer->endElement();
	
	//refDesc
	if (array_key_exists('refs', $content)){
		if (count($content['refs']) > 0){
			$writer->startElement('nuds:refDesc');
				foreach($content['refs'] as $k=>$v){					
					if ($k == 'uri'){
						$label = get_label($v);	
						
						$writer->startElement('nuds:reference');
							$writer->writeAttribute('xlink:arcrole', 'nmo:hasTypeSeriesItem');
							$writer->writeAttribute('xlink:href', $v);
							$writer->text($label);
						$writer->endElement();
					} else {
						//if there's a URI and the key is ref1, then skip the reference
						if (array_key_exists('uri', $content['refs']) && $k == 'ref1'){
							
						} else {
							$writer->writeElement('nuds:reference', $v);
						}
					}
				}
			$writer->endElement();
		}	
	}
}

function get_label($uri){
	GLOBAL $nomisma;
	
	if (array_key_exists($uri, $nomisma)){
		return $nomisma[$uri];
	} else {
		//get label from Nomisma API
		$json = file_get_contents('http://nomisma.org/apis/getLabel?uri=' . $uri . '&format=json');
		$obj = json_decode($json);
		
		if (strlen($obj->label) > 0){
			$nomisma[$uri] = $obj->label;
			return $obj->label;
		} else {
			echo "Error: {$uri} is invalid\n";
			return null;
		}		
	}
}

//parse CSV
function generate_json($doc){
	$keys = array();
	$geoData = array();
	
	$data = csvToArray($doc, ',');
	
	// Set number of elements (minus 1 because we shift off the first row)
	$count = count($data) - 1;
	
	//Use first row for names
	$labels = array_shift($data);
	
	foreach ($labels as $label) {
		$keys[] = $label;
	}
	
	// Bring it all together
	for ($j = 0; $j < $count; $j++) {
		$d = array_combine($keys, $data[$j]);
		$geoData[$j] = $d;
	}
	return $geoData;
}

// Function to convert CSV into associative array
function csvToArray($file, $delimiter) {
	if (($handle = fopen($file, 'r')) !== FALSE) {
		$i = 0;
		while (($lineArray = fgetcsv($handle, 4000, $delimiter, '"')) !== FALSE) {
			for ($j = 0; $j < count($lineArray); $j++) {
				$arr[$i][$j] = $lineArray[$j];
			}
			$i++;
		}
		fclose($handle);
	}
	return $arr;
}

?>